sequenceDiagram
    participant User as User
    participant Controller as Controller
    participant AuthService as AuthService
    participant UserService as UserService
    participant PublicIP as PublicIP
    participant ResetPasswordTemplate as ResetPasswordTemplate
    participant EmailQueue as EmailQueue

    User->>Controller: password(req, res)
    activate Controller
    Controller->>AuthService: getAuthUserByUsername(req.currentUser!.username)
    activate AuthService
    AuthService-->>Controller: existingUser
    deactivate AuthService

    Controller->>existingUser: comparePassword(currentPassword)
    activate existingUser
    existingUser-->>Controller: passwordsMatch
    deactivate existingUser

    Controller->>existingUser: hashPassword(newPassword)
    activate existingUser
    existingUser-->>Controller: hashedPassword
    deactivate existingUser

    Controller->>UserService: updatePassword(req.currentUser!.username, hashedPassword)
    activate UserService
    deactivate UserService

    Controller->>PublicIP: address()
    activate PublicIP
    PublicIP-->>Controller: ipaddress
    deactivate PublicIP

    Controller->>ResetPasswordTemplate: passwordResetConfirmationTemplate(templateParams)
    activate ResetPasswordTemplate
    ResetPasswordTemplate-->>Controller: template
    deactivate ResetPasswordTemplate

    Controller->>EmailQueue: addEmailJob('changePassword', { template, receiverEmail, subject })
    activate EmailQueue
    deactivate EmailQueue

    Controller-->>User: res.status(HTTP_STATUS.OK).json({ message })
    deactivate Controller